XOR OPERATION 
#include<stdio.h> 
void main() 
{ 
  char input[]="hello world"; 
  char result[sizeof(input)]; 
  for(int i=0;i<sizeof(input)-1;i++) 
   result[i]=input[i]^0; 
  printf("Original string:%s\n", input); 
  printf("XORed string:%s\n",result); 
}




XOR A STRING WITH 127 
#include <stdio.h>
#include <string.h>

int main() {
    char a[100];
    char output[100]; 
    int j = 0;
    printf("Enter a string: ");
    fgets(a, sizeof(a), stdin); 

    for (int i = 0; a[i] != '\0'; i++) {
        if (a[i] != ' ') {
            // XOR operation with 127
            char xorChar = a[i] ^ 127; 
            // AND operation with 127
            char andChar = a[i] & 127; 
            // Store the results in the output array (you can choose how to store them)
            output[j] = xorChar; // Store XOR result
            j++; 
            output[j] = andChar; // Store AND result
            j++; 
            printf("XOR Output: %c, ASCII value: %d\t\n", xorChar, (int)xorChar);
            printf("AND Output: %c, ASCII value: %d\t\n", andChar, (int)andChar);
        }
    }
    
    output[j] = '\0'; // Null terminate the output string
    printf("Processed string without spaces: %s\n", output);
    
    return 0;
}




CEASER CIPHER 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main() {
    char s[100];
    printf("Enter a string: "); 
    fgets(s, sizeof(s), stdin);
    int len = strlen(s);
    char e[len + 1];
    char d[len + 1]; 
    for (int i = 0; i < len; i++) {
        if (s[i] >= 'A' && s[i] <= 'Z') {
            e[i] = (s[i] - 'A' + 3) % 26 + 'A';
        } else if (s[i] >= 'a' && s[i] <= 'z') {
            e[i] = (s[i] - 'a' + 3) % 26 + 'a';
        } else {
            e[i] = s[i]; 
        }
    }
    e[len]='\0';  
     for (int i = 0; i < len; i++) {
        if (e[i] >= 'A' && e[i] <= 'Z') {
            d[i] = (e[i] - 'A' - 3 + 26) % 26 + 'A';
        } else if (e[i] >= 'a' && e[i] <= 'z') {
            d[i] = (e[i] - 'a' - 3 + 26) % 26 + 'a';
        } else {
            d[i] = e[i];
        }
    }
    d[len] = '\0';
    printf("Encrypted string: %s\n", e);
    printf("Decrypted string: %s\n", d);
    return 0;
}





SUBSTITUTION CIPHER 
#include <stdio.h>
#include <string.h>

void encrypt(char *input, char *output, char *key) {
    for (int i = 0; input[i] != '\0'; i++) {
        if (input[i] >= 'a' && input[i] <= 'z') {
            // Encrypt lowercase letters
            output[i] = key[input[i] - 'a'];
        } else if (input[i] >= 'A' && input[i] <= 'Z') {
            // Encrypt uppercase letters
            output[i] = key[input[i] - 'A'] - 'a' + 'A'; // Keep the case
        } else {
            // Non-alphabetic characters remain unchanged
            output[i] = input[i];
        }
    }
    output[strlen(input)] = '\0'; // Null terminate the output string
}

void decrypt(char *input, char *output, char *key) {
    for (int i = 0; input[i] != '\0'; i++) {
        if (input[i] >= 'a' && input[i] <= 'z') {
            // Decrypt lowercase letters
            output[i] = 'a' + strchr(key, input[i]) - key;
        } else if (input[i] >= 'A' && input[i] <= 'Z') {
            // Decrypt uppercase letters
            output[i] = 'A' + strchr(key, input[i] + 'a' - 'A') - key; // Keep the case
        } else {
            // Non-alphabetic characters remain unchanged
            output[i] = input[i];
        }
    }
    output[strlen(input)] = '\0'; // Null terminate the output string
}

int main() {
    char key[26] = "qwertyuiopasdfghjklzxcvbnm"; // Substitution key
    char input[100], encrypted[100], decrypted[100];

    printf("Enter a message to encrypt: ");
    fgets(input, sizeof(input), stdin); // Read input string
    input[strcspn(input, "\n")] = 0; // Remove newline character

    encrypt(input, encrypted, key);
    printf("Encrypted message: %s\n", encrypted);

    decrypt(encrypted, decrypted, key);
    printf("Decrypted message: %s\n", decrypted);

    return 0;
}




HILL CIPHER 
#include<stdio.h> 
void main() 
{ 
 int i,j; 
 int key[2][2]={{2,3},{3,6}}; 
 char a[]="attack"; 
 int len=sizeof(a)-1; 
 char e[len], num[len],d[len]; 
 for(i=0;i<len;i++) 
  { 
      num[i]=a[i]-'a'; 
  } 
 for(i=0;i<=len;i=i+2) 
  { 
   e[i]=((num[i]*key[0][0])%26+(num[i+1]*key[1][0])%26)%26; 
   e[i+1]=((num[i]*key[0][1])%26+(num[i+1]*key[1][1])%26)%26; 
  } 
char enc[len]; 
for(i=0;i<len;i++) 
 { 
    enc[i]=e[i]+'a'; 
 } 
printf("Original string:%s\n",a); 
printf("Encrypted string=%s\t\n",enc); 
int del= (key[0][0]*key[1][1])-(key[0][1]*key[1][0]); 
int del_inv; 
for(i=0;i<26;i++) 
 { 
  if((del*i)%26==1) 
   { 
    del_inv=i; 
    break; 
   } 
 } 
int k_adj[2][2]={{key[1][1],0-key[1][0]}, {0-key[0][1],key[0][0]}}; 
int k_inv[2][2]; 
for(i=0;i<2;i++) 
 { 
  for(j=0;j<2;j++) 
   { 
    k_inv[i][j]=k_adj[i][j]*del_inv; 
   } 
 } 
for(i=0;i<2;i++) 
 { 
  for(j=0;j<2;j++) 
   { 
    if(k_inv[i][j]<0) 
     { 
      k_inv[i][j]+=26; 
     } 
   } 
 } 
for(i=0;i<=len;i=i+2) 
{ 
    d[i]=((e[i]*k_inv[0][0])%26+(e[i+1]*k_inv[1][0])%26)%26; 
    d[i+1]=((e[i]*k_inv[0][1])%26+(e[i+1]*k_inv[1][1])%26)%26; 
} 
char dec[len]; 
for(i=0;i<len;i++) 
{
    dec[i]=d[i]+'a'; 
} 
printf("Decrypted string=%s\t\n", dec); 
}




DES 
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import java.util.Base64;

public class Des {
    public static void main(String[] args) throws Exception {
        String originalText = "Hello World";
        String keyString = "01234567"; 
        DESKeySpec desKeySpec = new DESKeySpec(keyString.getBytes());
        SecretKey secretKey = SecretKeyFactory.getInstance("DES").generateSecret(desKeySpec);
        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = cipher.doFinal(originalText.getBytes());
        String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("Original Text: " + originalText);
        System.out.println("Encrypted Text: " + encryptedText);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));
        String decryptedText = new String(decryptedBytes);
        System.out.println("Decrypted Text: " + decryptedText);
    }
}


RSA
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int checkPrime(int n) {
    if (n <= 1) return 0;
    if (n <= 3) return 1;
    if (n % 2 == 0 || n % 3 == 0) return 0;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return 0;
    }
    return 1;
}

int findGCD(int n1, int n2) {
    while (n2 != 0) {
        int temp = n2;
        n2 = n1 % n2;
        n1 = temp;
    }
    return n1;
}

// Function to calculate modular exponentiation
long long powMod(long long a, long long b, long long n) {
    long long x = 1, y = a;
    while (b > 0) {
        if (b % 2 == 1)
            x = (x * y) % n;
        y = (y * y) % n;
        b /= 2;
    }
    return x % n;
}

// Extended Euclidean Algorithm to find modular inverse
int modInverse(int e, int phin) {
    int t = 0, newT = 1;
    int r = phin, newR = e;
    while (newR != 0) {
        int quotient = r / newR;
        int tempT = newT;
        newT = t - quotient * newT;
        t = tempT;
        
        int tempR = newR;
        newR = r - quotient * newR;
        r = tempR;
    }
    if (r > 1) return -1; // No modular inverse if r != 1
    if (t < 0) t += phin;
    return t;
}

int main() {
    int p, q, n, phin;
    int data, cipher, decrypt;

    // Input two prime numbers
    while (1) {
        printf("Enter any two prime numbers: ");
        scanf("%d %d", &p, &q);
        if (!(checkPrime(p) && checkPrime(q)))
            printf("Both numbers are not prime. Please enter prime numbers only...\n");
        else
            break;
    }

    n = p * q;
    phin = (p - 1) * (q - 1);

    // Select an encryption exponent e
    int e;
    for (e = 5; e < phin; e++) {
        if (findGCD(phin, e) == 1)
            break;
    }

    // Find modular inverse of e, which is d
    int d = modInverse(e, phin);
    if (d == -1) {
        printf("Failed to find a valid decryption key.\n");
        return -1;
    }

    printf("Value of e: %d\nValue of d: %d\n", e, d);
    
    // Input data to encrypt
    printf("Enter some numerical data: ");
    scanf("%d", &data);
    
    if (data >= n) {
        printf("Data should be less than %d\n", n);
        return -1;
    }

    // Encryption and Decryption
    cipher = powMod(data, e, n);
    printf("The cipher text is: %d\n", cipher);

    decrypt = powMod(cipher, d, n);
    printf("The decrypted text is: %d\n", decrypt);

    return 0;
}



RC4
 import javax.crypto.Cipher;
 import javax.crypto.spec.SecretKeySpec;
 class Main{
 public static byte[]rc4(byte[]key,byte[]data)throws Exception{
 SecretKeySpec keySpec=new SecretKeySpec(key,"RC4");
Cipher cipher=Cipher.getInstance("RC4");
 cipher.init(Cipher.ENCRYPT_MODE,keySpec);
 return cipher.doFinal(data);
 }
 public static byte[]rc4Decrypt(byte[]key,byte[]encryptedData)throws Exception{
 SecretKeySpec keySpec=new SecretKeySpec(key,"RC4");
 Cipher cipher=Cipher.getInstance("RC4");
 cipher.init (Cipher.DECRYPT_MODE,keySpec);
 return cipher.doFinal(encryptedData);
 }
 public static void main(String[] args){
 try{
 String key="secretpassword";
 String data="dbddbbddb";
 byte[]encryptedData=rc4(key.getBytes(),data.getBytes());
 System.out.println("Encrypted Data: "+new String(encryptedData));
 byte[]decryptedData=rc4Decrypt(key.getBytes(),encryptedData);
 System.out.println("Decrypted Data: "+new String(decryptedData));
 }
 catch(Exception e){
 e.printStackTrace();
 }
 }
 }


blowfish
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Scanner;
               public class Blowfish{
                              public static byte[]encrypt (byte[] plaintext,byte[] key)throws Exception{
                                             Cipher cipher = Cipher.getInstance("Blowfish");
                                             SecretKeySpec secretKeySpec=new SecretKeySpec(key,"Blowfish");
                                             cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
                                             return cipher.doFinal(plaintext);
                              }  
                              public static byte[]decrypt(byte[] ciphertext,byte[] key)throws Exception{
                                             Cipher cipher=Cipher.getInstance("Blowfish");
                                             SecretKeySpec secretKeySpec= new SecretKeySpec(key,"Blowfish");
                                             cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
                                             return cipher.doFinal(ciphertext);          
                              }  
                              public static void main(String[] args)throws Exception{
                                             byte[]key="my_secret_key".getBytes();
                                             Scanner sc = new Scanner(System.in);
                                             System.out.println("Enter the plain text");
                                             byte[] plaintext=sc.nextLine().getBytes();
                                             byte[] ciphertext=encrypt(plaintext,key);
                                             System.out.println("Ciphertext :"+new String(ciphertext));
                                             byte[] decrypted=decrypt(ciphertext,key);
                                             System.out.println("Decrypted Text:"+new String(decrypted));
                                             sc.close();
                              }

                       }


DF
#include <stdio.h>
#include <math.h>
void main()
{
    int q,a;
    printf("Enter the value of prime number:\n");
    scanf("%d",&q);
    printf("Enter the primitive root of a a prime number");
    scanf("%d",&a);
    int X,Y,M,N;
    printf("Enter the value of private key of A :\n");
    scanf("%d",&X);
    printf("Enter the value of private Key of B:\n");
    scanf("%d",&Y);
    N=pow(a,X);
    int C=N%q;
    printf("Thwe public Key of A is :%d\n",C);
    M=pow(a,Y);
    int D=M%q;
    printf("The public key of B is:%d\n",D);
    int k1=pow(D,X);
    int v=k1%q;
    printf("The secret key generated by A is :%d\n",v);
    int k2=pow(C,Y);
    int w=k2%q;
    printf("The secret key generated by B is :%d\n",w);
}


MD5
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

public class MD5Example {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter the text to hash:");
        String input = scanner.nextLine();
        
        try {
            // Create an MD5 MessageDigest instance
            MessageDigest md = MessageDigest.getInstance("MD5");
            
            // Calculate the hash
            byte[] hashBytes = md.digest(input.getBytes());
            
            // Convert byte array to hexadecimal format
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            
            // Output the MD5 hash
            System.out.println("MD5 Hash: " + hexString.toString());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("MD5 algorithm not found.");
        } finally {
            scanner.close();
        }
    }
}



Digital Signature
 import java.security. KeyPair:
 import java.security. KeyPairGenerator;
 import java.security.PrivateKey;
 import java.security.PublicKey;
 import java.security.Signature:
 import java.util.Scanner;
 public class DigitalSignature {
 public static void main(String[] args) {
 try {
 // Generate a key pair KeyPairGenerator keyPairGenerator = 
KeyPairGenerator.getInstance("DSA"); keyPairGenerator.initialize(2048); KeyPair keyPair = 
keyPairGenerator.generateKeyPair():
 // Get the private and public keys PrivateKey privateKey = keyPair.getPrivate(); PublicKey 
publicKey = keyPair.getPublic();
 // Create a Signature object
 Signature signature Signature.getInstance("SHA256withDSA");
 ignature.initSign(privateKey);
 // Get the message to sign from the user Scanner scanner = new Scanner(System.in); 
System.out.print("Enter the message to sign: "); String message = scanner.nextLine():
 // Update the signature object with the message signature.update(message.getBytes());
 // Generate the digital signature
 byte[] digitalSignature = signature.sign():
 System.out.println("Digital Signature: " + bytesToHex(digitalSignature));
 // Verify the signature
 signature.init Verify(publicKey);
 signature.update(message.getBytes());
 boolean isVerified = signature.verify(digitalSignature);
 if (isVerified) {
 System.out.println("Signature verified: Message is authentic.");
 } else {
System.out.println("Signature verification failed: Message has been tampered
 with!");
 }
 scanner.close();
 } catch (Exception e) {
 e.printStackTrace();
 }
 }
 / Helper method to convert bytes to hexadecimal string /
 private static String bytesToHex(byte[] bytes) {
 StringBuilder hexString = new StringBuilder();
 for (byte b: bytes) {
 String hex = Integer.toHexString(0xff & b): if (hex.length() == 1) {
 hexString.append('0');
 }
 hexString.append(hex); 
}
 return hexString.toString();
 }
 }
